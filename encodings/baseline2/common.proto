syntax = "proto3";

package baseline2;

option java_multiple_files = true;
option java_package = "io.opencensus.proto.trace.v1";
option java_outer_classname = "TraceProto";

option ruby_package = "OpenCensus.Proto.Trace.V1";
option go_package = "encodings/baseline2";

// Resource information.
message Resource {
    // Set of labels that describe the resource.
    repeated AttributeKeyValue attributes = 1;

    // dropped_attributes_count is the number of dropped attributes. If the value is 0, then
    // no attributes were dropped.
    uint32 dropped_attributes_count = 2;
}


// ValueType is the enumeration of possible types that a value can have.
enum ValueType {
    // String is in `AnyValue.string_value`. Strings are the most common value types and
    // we using 0 value for enum results in omission of the type from the wire (and hence
    // more compact representation).
    STRING  = 0;

    // 64-bit int is in `AnyValue.int_value`.
    INT     = 1;

    // Boolean field is in `AnyValue.bool_value`.
    BOOL    = 2;

    // 64-bit float.
    DOUBLE  = 3;

    // Array of values is in `ExoticValue.array_values` field.
    ARRAY   = 4;

    // Key-value list is in `ExoticValue.kvlist_values` field.
    KVLIST  = 5;

    // Spec requires that "null values within arrays MUST be preserved as-is". Use this
    // type to represent null values. All other fields in AnyValue are not set.
    NULL    = 6;
};

// AnyValue is used to represent any type of attribute value. AnyValue may contain a
// primitive value such as a string or integer or it may contain an arbitrary nested
// object containing arrays, key-value lists and and primitives. AnyValue can represent
// any data that JSON can represent.
message AnyValue {
    // type of the value.
    ValueType type = 1;

    // Only one of the following fields or one of fields in the ExoticValue message is
    // supposed to contain data (determined by `type` field).
    // We are deliberately not using Protobuf `oneof` for performance reasons (verified
    // by benchmarks).

    // This is used when type=BOOL.
    // (Performance note: keep `bool_value` immediately after `type` for more compact
    // representation due to struct field alignment rules in Go).
    bool bool_value = 2;

    // This is used when type=STRING.
    string string_value = 3;

    // This is used when type=INT.
    int64 int_value = 4;

    // This field is set only if `type` is DOUBLE, ARRAY or KVLIST.
    ExoticValue exotic_value = 5;
}

// ExoticValue is used to represent rarely used value types.
message ExoticValue {
    // This is used when type=DOUBLE.
    double double_value = 1;

    // This is used when type=ARRAY. The array may be empty (contain 0 elements).
    repeated AnyValue array_values = 2;

    // This is used when type=KVLIST. The list may be empty (contain 0 elements).
    repeated AttributeKeyValue kvlist_values = 3;
}

// AttributeKeyValue is a key-value pair that is used to store Span attributes, Link
// attributes, etc.
message AttributeKeyValue {
    string key = 1;
    AnyValue value = 2;
}

// StringKeyValue is a pair of key/value strings. This is the simpler (and faster) version
// of AttributeKeyValue that only supports string values.
message StringKeyValue {
    string key = 1;
    string value = 2;
}

// InstrumentationLibrary is a message representing the instrumentation library information
// such as the fully qualified name and version.
message InstrumentationLibrary {
    string name = 1;
    string version = 2;
}