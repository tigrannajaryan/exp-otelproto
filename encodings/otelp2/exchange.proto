syntax = "proto3";

package otelp2;

import "telemetry_data.proto";
import "metric_data.proto";
import "common.proto";

option go_package = "encodings/otelp2";

enum Capabilities {
    SKIP = 0;
    ZLIB_COMPRESSION = 1; // bit 0 of capabilities
    LZ4_COMPRESSION = 2;  // bit 1 of capabilities
}

// A request from client to server containing trace data to export.
message TraceExportRequest {
    // Unique sequential ID generated by the client.
    uint64 id = 1;

    // Telemetry data. An array of ResourceSpans.
    repeated ResourceSpans resourceSpans = 2;

    StringDict stringDict = 3;
    fixed64 start_time_unix_nano = 4;
}

// A request from client to server containing metric data to export.
message MetricExportRequest {
    // Unique sequential ID generated by the client.
    uint64 id = 1;

    // Telemetry data. An array of ResourceMetrics.
    repeated ResourceMetrics resourceMetrics = 2;

    StringDict stringDict = 3;
    fixed64 start_time_unix_nano = 4;
}

// A response to ExportRequest.
message ExportResponse {
  // ID of a response that the server acknowledges.
  uint64 id = 1;

  enum ResultCode {
    // Telemetry data is successfully processed by the server.
    Success = 0;
    
    // processing of telemetry data failed. The client MUST NOT retry 
    // sending the same telemetry data. The telemetry data MUST be dropped. 
    // This for example can happen when the request contains bad data and 
    // cannot be deserialized or otherwise processed by the server.
    FailedNoneRetryable = 1;
    
    // Processing of telemetry data failed. The client SHOULD record the 
    // error and MAY retry exporting the same data after some time. This 
    // for example can happen when the server is overloaded.
    FailedRetryable = 2;
  }
  ResultCode result_code = 2;
}

enum CompressionMethod {
    NONE = 0;
    LZ4 = 1;
    ZLIB = 2;
}

// RequestHeader is used by transports that unlike gRPC don't have built-in request
// compression such as WebSocket. Request body typically follows the header.
message RequestHeader {
  // Compression method used for body.
  CompressionMethod compression = 1;

  // Compression level as defined by the compression method.
  int32 compression_level = 2;
}

enum RequestType {
    _ = 0;
    TraceExport = 1;
}

// RequestBody is used by transports that unlike gRPC don't have built-in message type
// multiplexing such as WebSocket.
message RequestBody {
    RequestType request_type = 1;
    TraceExportRequest export = 2;
}

// Response is used by transports that unlike gRPC don't have built-in message type
// multiplexing such as WebSocket.
message Response {
    RequestType response_type = 1;
    ExportResponse export = 2;
}