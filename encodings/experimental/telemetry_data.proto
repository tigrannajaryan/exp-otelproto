syntax = "proto3";

package experimental;

import "common.proto";

option java_multiple_files = true;
option java_package = "io.opencensus.proto.trace.v1";
option java_outer_classname = "TraceProto";

option ruby_package = "OpenCensus.Proto.Trace.V1";
option go_package = "encodings/experimental";

// A collection of InstrumentationLibrarySpans from a Resource.
message ResourceSpans {
  // The resource for the spans in this message.
  // If this field is not set then no resource info is known.
  Resource resource = 1 [json_name="r"];

  // A list of InstrumentationLibrarySpans that originate from a resource.
  repeated InstrumentationLibrarySpans instrumentation_library_spans = 2 [json_name="i"];
}

// A collection of Spans produced by an InstrumentationLibrary.
message InstrumentationLibrarySpans {
  // The instrumentation library information for the spans in this message.
  // If this field is not set then no library info is known.
  InstrumentationLibrary instrumentation_library = 1 [json_name="i"];

  // A list of Spans that originate from an instrumentation library.
  repeated Span spans = 2 [json_name="s"];
}

// Span represents a single operation within a trace. Spans can be
// nested to form a trace tree. Spans may also be linked to other spans
// from the same or different trace and form graphs. Often, a trace
// contains a root span that describes the end-to-end latency, and one
// or more subspans for its sub-operations. A trace can also contain
// multiple root spans, or none at all. Spans do not need to be
// contiguous - there may be gaps or overlaps between spans in a trace.
//
// The next available field id is 17.
message Span {
  // A unique identifier for a trace. All spans from the same trace share
  // the same `trace_id`. The ID is a 16-byte array. An ID with all zeroes
  // is considered invalid.
  //
  // This field is semantically required. Receiver should generate new
  // random trace_id if empty or invalid trace_id was received.
  //
  // This field is required.
  bytes trace_id = 1 [json_name="ti"];

  // A unique identifier for a span within a trace, assigned when the span
  // is created. The ID is an 8-byte array. An ID with all zeroes is considered
  // invalid.
  //
  // This field is semantically required. Receiver should generate new
  // random span_id if empty or invalid span_id was received.
  //
  // This field is required.
  bytes span_id = 2 [json_name="si"];

  // trace_state conveys information about request position in multiple distributed tracing graphs.
  // It is a trace_state in w3c-trace-context format: https://www.w3.org/TR/trace-context/#tracestate-header
  // See also https://github.com/w3c/distributed-tracing for more details about this field.
  string trace_state = 3 [json_name="ts"];

  // The `span_id` of this span's parent span. If this is a root span, then this
  // field must be empty. The ID is an 8-byte array.
  bytes parent_span_id = 4 [json_name="p"];

  // A description of the span's operation.
  //
  // For example, the name can be a qualified method name or a file name
  // and a line number where the operation is called. A best practice is to use
  // the same display name at the same call point in an application.
  // This makes it easier to correlate spans in different traces.
  //
  // This field is semantically required to be set to non-empty string.
  // When null or empty string received - receiver may use string "name"
  // as a replacement. There might be smarted algorithms implemented by
  // receiver to fix the empty span name.
  //
  // This field is required.
  string name = 5 [json_name="n"];

  // SpanKind is the type of span. Can be used to specify additional relationships between spans
  // in addition to a parent/child relationship.
  enum SpanKind {
    // Unspecified. Do NOT use as default.
    // Implementations MAY assume SpanKind to be INTERNAL when receiving UNSPECIFIED.
    SPAN_KIND_UNSPECIFIED = 0;

    // Indicates that the span represents an internal operation within an application,
    // as opposed to an operations happening at the boundaries. Default value.
    SPAN_KIND_INTERNAL = 1;

    // Indicates that the span covers server-side handling of an RPC or other
    // remote network request.
    SPAN_KIND_SERVER = 2;

    // Indicates that the span describes a request to some remote service.
    SPAN_KIND_CLIENT = 3;

    // Indicates that the span describes a producer sending a message to a broker.
    // Unlike CLIENT and SERVER, there is often no direct critical path latency relationship
    // between producer and consumer spans. A PRODUCER span ends when the message was accepted
    // by the broker while the logical processing of the message might span a much longer time.
    SPAN_KIND_PRODUCER = 4;

    // Indicates that the span describes consumer receiving a message from a broker.
    // Like the PRODUCER kind, there is often no direct critical path latency relationship
    // between producer and consumer spans.
    SPAN_KIND_CONSUMER = 5;
  }

  // Distinguishes between spans generated in a particular context. For example,
  // two spans with the same name may be distinguished using `CLIENT` (caller)
  // and `SERVER` (callee) to identify queueing latency associated with the span.
  SpanKind kind = 6 [json_name="k"];

  // start_time_unix_nano is the start time of the span. On the client side, this is the time
  // kept by the local machine where the span execution starts. On the server side, this
  // is the time when the server's application handler starts running.
  // Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
  //
  // This field is semantically required and it is expected that end_time >= start_time.
  fixed64 start_time_unix_nano = 7 [json_name="s"];

  // end_time_unix_nano is the end time of the span. On the client side, this is the time
  // kept by the local machine where the span execution ends. On the server side, this
  // is the time when the server application handler stops running.
  // Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
  //
  // This field is semantically required and it is expected that end_time >= start_time.
  fixed64 end_time_unix_nano = 8 [json_name="e"];

  // attributes is a collection of key/value pairs. The value can be a string,
  // an integer, a double or the Boolean values `true` or `false`. Note, global attributes
  // like server name can be set using the resource API. Examples of attributes:
  //
  //     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
  //     "/http/server_latency": 300
  //     "abc.com/myattribute": true
  //     "abc.com/score": 10.239
  repeated KeyValue attributes = 9 [json_name="a"];

  // dropped_attributes_count is the number of attributes that were discarded. Attributes
  // can be discarded because their keys are too long or because there are too many
  // attributes. If this value is 0, then no attributes were dropped.
  uint32 dropped_attributes_count = 10 [json_name="da"];

  // Event is a time-stamped annotation of the span, consisting of user-supplied
  // text description and key-value pairs.
  message Event {
    // time_unix_nano is the time the event occurred.
    fixed64 time_unix_nano = 1 [json_name="t"];

    // name of the event.
    // This field is semantically required to be set to non-empty string.
    string name = 2 [json_name="n"];

    // attributes is a collection of attribute key/value pairs on the event.
    repeated KeyValue attributes = 3 [json_name="a"];

    // dropped_attributes_count is the number of dropped attributes. If the value is 0,
    // then no attributes were dropped.
    uint32 dropped_attributes_count = 4 [json_name="da"];
  }

  // events is a collection of Event items.
  repeated Event events = 11 [json_name="ev"];

  // dropped_events_count is the number of dropped events. If the value is 0, then no
  // events were dropped.
  uint32 dropped_events_count = 12 [json_name="de"];

  // A pointer from the current span to another span in the same trace or in a
  // different trace. For example, this can be used in batching operations,
  // where a single batch handler processes multiple requests from different
  // traces or when the handler receives a request from a different project.
  message Link {
    // A unique identifier of a trace that this linked span is part of. The ID is a
    // 16-byte array.
    bytes trace_id = 1 [json_name="ti"];

    // A unique identifier for the linked span. The ID is an 8-byte array.
    bytes span_id = 2 [json_name="si"];

    // The trace_state associated with the link.
    string trace_state = 3 [json_name="ts"];

    // attributes is a collection of attribute key/value pairs on the link.
    repeated KeyValue attributes = 4 [json_name="a"];

    // dropped_attributes_count is the number of dropped attributes. If the value is 0,
    // then no attributes were dropped.
    uint32 dropped_attributes_count = 5 [json_name="da"];
  }

  // links is a collection of Links, which are references from this span to a span
  // in the same or different trace.
  repeated Link links = 13 [json_name="l"];

  // dropped_links_count is the number of dropped links after the maximum size was
  // enforced. If this value is 0, then no links were dropped.
  uint32 dropped_links_count = 14 [json_name="dl"];

  // An optional final status for this span. Semantically when Status
  // wasn't set it is means span ended without errors and assume
  // Status.Ok (code = 0).
  Status status = 15 [json_name="st"];
}

// The Status type defines a logical error model that is suitable for different
// programming environments, including REST APIs and RPC APIs.
message Status {

  // StatusCode mirrors the codes defined at
  // https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/api-tracing.md#statuscanonicalcode
  enum StatusCode {
    STATUS_CODE_OK                  = 0;
    STATUS_CODE_CANCELLED           = 1;
    STATUS_CODE_UNKNOWN_ERROR       = 2;
    STATUS_CODE_INVALID_ARGUMENT    = 3;
    STATUS_CODE_DEADLINE_EXCEEDED   = 4;
    STATUS_CODE_NOT_FOUND           = 5;
    STATUS_CODE_ALREADY_EXISTS      = 6;
    STATUS_CODE_PERMISSION_DENIED   = 7;
    STATUS_CODE_RESOURCE_EXHAUSTED  = 8;
    STATUS_CODE_FAILED_PRECONDITION = 9;
    STATUS_CODE_ABORTED             = 10;
    STATUS_CODE_OUT_OF_RANGE        = 11;
    STATUS_CODE_UNIMPLEMENTED       = 12;
    STATUS_CODE_INTERNAL_ERROR      = 13;
    STATUS_CODE_UNAVAILABLE         = 14;
    STATUS_CODE_DATA_LOSS           = 15;
    STATUS_CODE_UNAUTHENTICATED     = 16;
  };

  // The status code. This is optional field. It is safe to assume 0 (OK)
  // when not set.
  StatusCode code = 1 [json_name="c"];

  // A developer-facing human readable error message.
  string message = 2 [json_name="m"];
}
