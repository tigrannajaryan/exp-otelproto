// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: grpc.proto

package baseline

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UnaryExporterClient is the client API for UnaryExporter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UnaryExporterClient interface {
	ExportTraces(ctx context.Context, in *TraceExportRequest, opts ...grpc.CallOption) (*ExportResponse, error)
}

type unaryExporterClient struct {
	cc grpc.ClientConnInterface
}

func NewUnaryExporterClient(cc grpc.ClientConnInterface) UnaryExporterClient {
	return &unaryExporterClient{cc}
}

func (c *unaryExporterClient) ExportTraces(ctx context.Context, in *TraceExportRequest, opts ...grpc.CallOption) (*ExportResponse, error) {
	out := new(ExportResponse)
	err := c.cc.Invoke(ctx, "/baseline.UnaryExporter/ExportTraces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UnaryExporterServer is the server API for UnaryExporter service.
// All implementations must embed UnimplementedUnaryExporterServer
// for forward compatibility
type UnaryExporterServer interface {
	ExportTraces(context.Context, *TraceExportRequest) (*ExportResponse, error)
	mustEmbedUnimplementedUnaryExporterServer()
}

// UnimplementedUnaryExporterServer must be embedded to have forward compatible implementations.
type UnimplementedUnaryExporterServer struct {
}

func (UnimplementedUnaryExporterServer) ExportTraces(context.Context, *TraceExportRequest) (*ExportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportTraces not implemented")
}
func (UnimplementedUnaryExporterServer) mustEmbedUnimplementedUnaryExporterServer() {}

// UnsafeUnaryExporterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UnaryExporterServer will
// result in compilation errors.
type UnsafeUnaryExporterServer interface {
	mustEmbedUnimplementedUnaryExporterServer()
}

func RegisterUnaryExporterServer(s grpc.ServiceRegistrar, srv UnaryExporterServer) {
	s.RegisterService(&UnaryExporter_ServiceDesc, srv)
}

func _UnaryExporter_ExportTraces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TraceExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnaryExporterServer).ExportTraces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/baseline.UnaryExporter/ExportTraces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnaryExporterServer).ExportTraces(ctx, req.(*TraceExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UnaryExporter_ServiceDesc is the grpc.ServiceDesc for UnaryExporter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UnaryExporter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "baseline.UnaryExporter",
	HandlerType: (*UnaryExporterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExportTraces",
			Handler:    _UnaryExporter_ExportTraces_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc.proto",
}

// StreamExporterClient is the client API for StreamExporter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamExporterClient interface {
	ExportTraces(ctx context.Context, opts ...grpc.CallOption) (StreamExporter_ExportTracesClient, error)
}

type streamExporterClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamExporterClient(cc grpc.ClientConnInterface) StreamExporterClient {
	return &streamExporterClient{cc}
}

func (c *streamExporterClient) ExportTraces(ctx context.Context, opts ...grpc.CallOption) (StreamExporter_ExportTracesClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamExporter_ServiceDesc.Streams[0], "/baseline.StreamExporter/ExportTraces", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamExporterExportTracesClient{stream}
	return x, nil
}

type StreamExporter_ExportTracesClient interface {
	Send(*TraceExportRequest) error
	Recv() (*ExportResponse, error)
	grpc.ClientStream
}

type streamExporterExportTracesClient struct {
	grpc.ClientStream
}

func (x *streamExporterExportTracesClient) Send(m *TraceExportRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamExporterExportTracesClient) Recv() (*ExportResponse, error) {
	m := new(ExportResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamExporterServer is the server API for StreamExporter service.
// All implementations must embed UnimplementedStreamExporterServer
// for forward compatibility
type StreamExporterServer interface {
	ExportTraces(StreamExporter_ExportTracesServer) error
	mustEmbedUnimplementedStreamExporterServer()
}

// UnimplementedStreamExporterServer must be embedded to have forward compatible implementations.
type UnimplementedStreamExporterServer struct {
}

func (UnimplementedStreamExporterServer) ExportTraces(StreamExporter_ExportTracesServer) error {
	return status.Errorf(codes.Unimplemented, "method ExportTraces not implemented")
}
func (UnimplementedStreamExporterServer) mustEmbedUnimplementedStreamExporterServer() {}

// UnsafeStreamExporterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamExporterServer will
// result in compilation errors.
type UnsafeStreamExporterServer interface {
	mustEmbedUnimplementedStreamExporterServer()
}

func RegisterStreamExporterServer(s grpc.ServiceRegistrar, srv StreamExporterServer) {
	s.RegisterService(&StreamExporter_ServiceDesc, srv)
}

func _StreamExporter_ExportTraces_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamExporterServer).ExportTraces(&streamExporterExportTracesServer{stream})
}

type StreamExporter_ExportTracesServer interface {
	Send(*ExportResponse) error
	Recv() (*TraceExportRequest, error)
	grpc.ServerStream
}

type streamExporterExportTracesServer struct {
	grpc.ServerStream
}

func (x *streamExporterExportTracesServer) Send(m *ExportResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamExporterExportTracesServer) Recv() (*TraceExportRequest, error) {
	m := new(TraceExportRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamExporter_ServiceDesc is the grpc.ServiceDesc for StreamExporter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamExporter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "baseline.StreamExporter",
	HandlerType: (*StreamExporterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExportTraces",
			Handler:       _StreamExporter_ExportTraces_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc.proto",
}
